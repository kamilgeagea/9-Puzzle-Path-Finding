from dfs import depth_first_search
from id import iterative_deepening
from a_star import a_star
from heuristics import h1, h2, h3
from utility_functions import *


puzzle3x3 = generate_puzzles(20, 3)

sum_ET_h1 = 0
avg_ET_h1 = 0
sum_SP_h1 = 0
avg_SP_h1 = 0

tot_sol_h1 = 0
avg_sol_h1 = 0

tot_NS_h1 = 0
avg_NS_h1 = 0

sum_ET_h2 = 0
avg_ET_h2 = 0
sum_SP_h2 = 0
avg_SP_h2 = 0
tot_NS_h2 = 0
avg_NS_h2 = 0

tot_sol_h2 = 0
avg_sol_h2 = 0

# for x1 in range(20):
#     b = depth_first_search(puzzle3x3[x1], k=None)
# print("Data " + str(b["data"]))
# print("Search Path: " + str(b["search_path"]))
# print("Execution Time: " + str(b["execution_time"]))


# for x2 in range(20):
#     b = iterative_deepening(puzzle3x3[x2])
# print("Data " + str(b["data"]))
# print("Search Path: " + str(b["search_path"]))
# print("Execution Time: " + str(b["execution_time"]))


for x3 in range(20):
    b = a_star(puzzle3x3[x3], h1)
    sum_ET_h1 += b["execution_time"]
    sum_SP_h1 += len(b["search_path"])
    # print("Data " + str(b["data"]))
    # print("Search Path: " + str(b["search_path"]))
    # print("Execution Time: " + str(b["execution_time"]))



for x4 in range(20):
    b = a_star(puzzle3x3[x4], h2)
    sum_ET_h2 += b["execution_time"]
    sum_SP_h2 += len(b["search_path"])
    # print("Data " + str(b["data"]))
    # print("Search Path: " + str(b["search_path"]))
    # print("Execution Time: " + str(b["execution_time"]))


# Analysis 1.
avg_ET_h1 = sum_ET_h1/20
avg_SP_h1 = sum_SP_h1/20
print("Sum_h1: " + str(sum_ET_h1))
print("Avg_h1: " + str(avg_ET_h1))
print("Sum_SP_h1: " + str(sum_SP_h1))
print("Avg_SP_h1: " + str(avg_SP_h1))
print("")

# Analysis 2.
avg_ET_h2 = sum_ET_h2/20
avg_SP_h2 = sum_SP_h2/20
print("Sum_ET_h2: " + str(sum_ET_h2))
print("Avg_ET_h2: " + str(avg_ET_h2))
print("Sum_SP_h2: " + str(sum_SP_h2))
print("Avg_SP_h2: " + str(avg_SP_h2))
print("")